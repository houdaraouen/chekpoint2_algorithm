ALGORITHM Dot_product
//declarer un procedure
PROCEDURE dot_product(V : ARRAY_OF INTEGER[n]; U : ARRAY_OF INTEGER[m];)
VAR
    i ,j: INTEGER;
    p : FLOAT;
BEGIN
i:=0;
j:=0;
    FOR i FROM 0 TO n-1 STEP 1  DO
       FOR j FROM 0 TO m-1 STEP 1  DO
        p:= p+ v[i]*u[j];
        i+=1;
        j+=1;
        read(p)
       END_FOR 
    END_FOR
END
//declarer une fonction
FUNCTION dot_product(V:INTEGER, U:INTEGER) : FLOAT
VAR
    x,y:INTEGER;
    p2:FLOAT;
BEGIN
p2:=0;
    FOR x FROM 0 TO n-1 STEP 1  DO
       FOR y FROM 0 TO m-1 STEP 1  DO
        p2:= p2+ v[i]*u[j];
        x+=1;
        y+=1;
        read(p2)
       END_FOR 
    END_FOR
    RETURN p2 ;
END
//commencer notre algotithme
VAR
    V : ARRAY_OF INTEGER[3];
    U : ARRAY_OF INTEGER[3];
    prod : FLOAT;
BEGIN
    writa("veuillez entrer les cordonnés du vecteur ",V);
    read V
    write("veuillez entrer les cordonnés du vecteur",U);
    read U
    //calling procedure
    dot_product(V,U);
    prod:=dot_product()
     //calling function
    read("le produit de deux vecteurs est", dot_product(V,U))

    
        
        IF (prod==0) THEN
            write("les deux vecteurs sont orthogonals");
        ELSE
            write("les deux vecteurs ne sont pas orthogonals");
        END_IF
    

END